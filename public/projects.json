[
  {
    "id": "marathon-management",
    "name": "Marathon Management System",
    "image": {
      "img1": "https://i.ibb.co/dsrbTjSf/Screenshot-28.png",
      "img2": "https://i.ibb.co/wZK9pDkR/Screenshot-29.png",
      "img3": "https://i.ibb.co/Qvyt72B2/Screenshot-30.png"
    },
    "techStack": [
      "React",
      "Tailwind",
      "DaisyUI",
      "Node.js",
      "Express",
      "MongoDB",
      "JWT",
      "Firebase"
    ],
    "description": "The Marathon Management System is a comprehensive platform designed to facilitate the organization and participation in marathon events. It connects event organizers with participants, allowing users to create marathon events, manage registrations, and track their applications through a personalized dashboard. The system supports secure email/password and social login authentication, with JWT tokens for enhanced security on private routes. Users can explore upcoming marathons, view detailed event information, and register for events within designated registration periods. Organizers have full control over their events, including creating, updating, and deleting marathon entries. Participants can manage their applications, updating or canceling registrations as needed. The platform features a responsive design adaptable to mobile, tablet, and desktop devices, ensuring seamless user experience across all screens. Key interactive elements include dynamic page titles, loading spinners, toast notifications for all actions, and a countdown timer displaying time remaining until each marathon starts. Advanced features like server-side search and sorting enhance performance and usability. Additionally, the system supports optional enhancements such as dark/light theme toggling and integration with popular Tailwind CSS libraries for a polished UI. Overall, this project offers practical experience in building a secure, scalable full-stack application that efficiently manages complex event and user data.",
    "liveLink": "https://marathons-management.web.app/",
    "githubLinks": {
      "frontend": "https://github.com/mdabdullahr/marathon-management-client-repo",
      "backend": "https://github.com/mdabdullahr/marathon-management-client-repo"
    },
    "challenges": "While developing the Marathon Management System, I encountered several significant challenges. Implementing JWT authentication alongside social login required careful token management and secure private route handling. Building efficient server-side search and filtering using MongoDB’s regex capabilities posed challenges in balancing performance and accuracy. Integrating the react-countdown-circle-timer to dynamically display time left until each marathon start involved synchronizing timers with backend data. Managing modal-based update and delete operations demanded precise UI and state control to ensure smooth user experience. Ensuring persistent login states without redirecting users to the login page on private route reloads required advanced session handling. Additionally, implementing sorting functionality on the marathon list based on creation dates, while keeping the UI responsive across all devices, added complexity. Finally, incorporating optional features like dark/light theme toggle and integrating external Tailwind CSS libraries required balancing design consistency with functionality.",
    "futurePlans": "In the future, I plan to enhance the Marathon Management System by adding real-time notifications and reminders for upcoming marathons to improve participant engagement. I aim to implement a calendar integration feature, allowing users to visualize marathon schedules more intuitively. Expanding the dashboard capabilities to include analytics and insights for event organizers will provide better management tools. Introducing a multi-language interface will make the platform accessible to a broader audience. I also plan to optimize server-side performance for handling larger datasets and improve security with multi-factor authentication. Lastly, developing a dedicated mobile application will increase accessibility and user convenience.",
    "mainFeatures": [
      "Full JWT authentication integrating both email/password and social login",
    "Server-side search and filtering with MongoDB $regex for scalable and secure queries",
    "Dynamic countdown timer showing time remaining until marathon start using react-countdown-circle-timer",
    "Personalized dashboard with separate 'My Marathons' and 'My Apply' lists",
    "Modal-based update and delete confirmations for marathons and registrations",
    "Automatic total registration count update upon new registrations",
    "Advanced sorting options on marathons based on creation date",
    "Persistent login with no redirection to login page on private route reload",
    "Responsive design with optional dark/light theme toggling",
    "Seamless integration of popular Tailwind CSS libraries like mamba UI, shadcn, chakra UI, or flowbite"
    ]
  },
  {
    "id": "hobbyhub",
    "name": "HobbyHub",
    "image": {
      "img1": "https://i.ibb.co/yBMhfXgj/Screenshot-33.png",
      "img2": "https://i.ibb.co/67NxjrJ3/Screenshot-32.png",
      "img3": "https://i.ibb.co/HL1YBYsL/Screenshot-31.png"
    },
    "techStack": [
      "React",
      "Tailwind",
      "DaisyUI",
      "Node.js",
      "Express",
      "MongoDB",
      "Firebase"
    ],
    "description": "HobbyHub is a dynamic web platform designed to connect people through shared interests by allowing users to discover, join, and create local hobby-based groups such as book clubs, hiking teams, painting circles, and more. The platform fosters community engagement by providing a user-friendly environment for hobby enthusiasts to collaborate and build meaningful connections. Users can browse featured groups, explore all available hobby groups, and create new ones by submitting detailed information including category, description, meeting location, and member limits. The application supports secure email/password authentication with options for Google or GitHub login, enabling users to manage their profile and their own created groups seamlessly. Key features include protected routes ensuring only authenticated users can create, join, update, or delete groups, while providing real-time feedback with toast notifications and sweet alerts. Users can manage their groups through a dedicated dashboard that offers intuitive controls for updating or deleting groups, including confirmation prompts for destructive actions.HobbyHub emphasizes responsive design, accessible on any device, and includes modern UI enhancements such as a dark/light theme toggle and animated components using libraries like Lottie React and React Awesome Reveal. Additionally, the platform smartly prevents users from joining groups whose start dates have passed, ensuring relevant and active participation.The application is built with best practices in environment security by safeguarding Firebase and MongoDB credentials through environment variables. It is deployed as a single-page application, providing seamless navigation with no route reload errors, and ensures persistent user sessions across reloads.",
    "liveLink": "https://hobby-hub-auth.web.app/",
    "githubLinks": {
      "frontend": "https://github.com/mdabdullahr/hobby-hub-client-repo",
      "backend": "https://github.com/mdabdullahr/hobby-hub-server-repo"
    },
    "challenges": "During the development of HobbyHub, several challenges arose that required careful handling. Implementing protected routes to ensure only authenticated users could create, update, or join groups demanded precise access control. Managing complex form validations for multiple input fields such as group details and enforcing password rules proved tricky. Maintaining persistent user authentication state across page reloads using Firebase was essential for seamless user experience. Additionally, conditional UI behavior—like disabling the “Join Group” button when the group’s start date had passed—required dynamic logic implementation. Synchronizing real-time profile and group data updates with backend databases (Firebase and MongoDB) added complexity, especially when integrating multiple authentication providers like Email/Password, Google, and GitHub. Enhancing user experience through loading spinners, toast notifications, and modal confirmations also demanded significant effort. Ensuring environment variables securely handled Firebase and MongoDB credentials on both client and server sides was critical for security. Deploying the app as a Single Page Application without route reload errors and implementing a consistent dark/light theme toggle across the interface further contributed to the project’s complexity. Overcoming these challenges helped in building a robust and user-friendly HobbyHub platform.",
    "futurePlans": "In the future, I plan to enhance HobbyHub by adding a real-time chat feature to facilitate better communication among group members. I will implement advanced search and filtering options based on hobby category, location, and activity level to help users find groups more easily. To keep users engaged, I will develop a notification and reminder system for upcoming group meetings. Additionally, I intend to introduce a rating and review system for groups and events to maintain quality and trust. Integrating a calendar view will allow users to visualize group schedules effectively. Expanding accessibility through a dedicated mobile app is also on the roadmap. For security, I will implement multi-factor authentication, and to handle growing user demand, I will optimize server-side performance to improve scalability.",
    "mainFeatures": [
      "Robust Authentication with Multiple Providers",
      "Comprehensive Protected Routes with Contextual Access",
      "User-Specific Dashboard (My Groups)",
      "Group Creation with Detailed Custom Inputs",
      "Start Date-Based Group Activity Logic",
      "Dark/Light Theme Toggle",
      "Advanced UI Animations",
      "Optimized UX with Loading Spinners and Toast Notifications",
      "Single Page Application with Error-Free Routing",
      "Secure Environment Handling"
    ]
  },
  {
    "id": "event-explorer",
    "name": "Event Explorer",
    "image": {
      "img1": "https://i.ibb.co/0jy965Yj/Screenshot-27.png",
      "img2": "https://i.ibb.co/SDZ2HTM8/Screenshot-28.png",
      "img3": "https://i.ibb.co/n8cCRPcL/Screenshot-29.png"
    },
    "techStack": [
      "React",
      "Tailwind",
      "DaisyUI",
      "Firebase",
      "Express",
      "MongoDB"
    ],
    "description": "Event Explorer is a responsive single-page web application designed for discovering and exploring local events such as tech conferences, art exhibitions, workshops, and sports tournaments. Users can browse a variety of upcoming events on the homepage, each presented in an interactive card layout with essential details like event name, category, date, location, and entry fee. <br>  The application features protected routes for event details and profile management, ensuring that only authenticated users can reserve seats or update their personal information. Authentication is handled via Firebase, supporting both email/password and Google sign-in methods, with robust form validation and feedback using toast notifications. <br>  Once logged in, users can view their profile, update their name and profile photo, and navigate seamlessly through the application without losing session state—even on page reloads. Additional features include a password reset system, dynamic document titles, a custom 404 page, and a clean, urban-themed UI focused on user experience. Event data is dynamically loaded from custom JSON, with images hosted externally for efficiency.",
    "liveLink": "https://event-explore-e54a1.web.app/",
    "githubLinks": {
      "frontend": "https://github.com/mdabdullahr/event-explore-repo",
      "backend": "https://github.com/mdabdullahr/event-explore-repo"
    },
    "challenges": "While building Event Explorer, one of the key challenges was implementing protected routes with smart redirect logic and maintaining auth state across reloads using Firebase's onAuthStateChanged. Dynamically updating user profiles with updateProfile() and reflecting changes in real-time UI also required careful state handling. Additional complexities included managing password validation with regex, integrating toast-based feedback across the app, and building a smart forget password feature that auto-fills previous input. Hosting as a SPA without route reload errors, using JSON-based event data with externally hosted images, and setting dynamic page titles further added depth to the development process. These unique implementations make Event Explorer stand out from typical React CRUD apps.",
    "futurePlans": "For future development, Event Explorer can be enhanced by integrating a real-time database (e.g., Firestore) to store user reservations, feedback, and event ratings. Adding filtering and search functionality by category, date, or location would significantly improve user experience. A dashboard for event organizers to create and manage events could expand the platform’s scope. Implementing pagination or infinite scroll for large event datasets, along with lazy loading of images, would optimize performance. Lastly, integrating a calendar view, notification system, and dark mode toggle are also on the roadmap to make the app more interactive and user-centric.",
    "mainFeatures": [
      "Auth state persist kore reload-er por user info auto show (via onAuthStateChanged)",
      "Custom JSON-based event data with externally hosted images (imgbb/postimages)",
      "Protected route-e login korar por exact previous page-e redirect hoy",
      "Custom JSON-based event data with externally hosted images (imgbb/postimages)",
      "Live profile update with Firebase updateProfile() – instantly reflected on UI",
      "Forget password form auto-fills email from previous login attempt",
      "Password show/hide toggle with interactive eye icon (UX-focused)",
      "Dynamic page titles per route for better UX & SEO",
      "Extra meaningful protected route beyond base requirements (e.g., My Bookings)",
      "Fully themed and user-friendly 404 Not Found page",
      "Global toast/sweetalert feedback for all user actions"
    ]
  }
]
